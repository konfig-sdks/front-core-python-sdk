# coding: utf-8

"""
    Core API

    Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

    The version of the OpenAPI document: 1.0.0
    Created by: https://community.front.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from front_core_python_sdk import schemas  # noqa: F401


class ConversationResponse(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TagResponse']:
                        return TagResponse
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TagResponse'], typing.List['TagResponse']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TagResponse':
                    return super().__getitem__(i)
            
            
            class _links(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        _self = schemas.StrSchema
                        
                        
                        class related(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    events = schemas.StrSchema
                                    followers = schemas.StrSchema
                                    messages = schemas.StrSchema
                                    comments = schemas.StrSchema
                                    inboxes = schemas.StrSchema
                                    last_message = schemas.StrSchema
                                    __annotations__ = {
                                        "events": events,
                                        "followers": followers,
                                        "messages": messages,
                                        "comments": comments,
                                        "inboxes": inboxes,
                                        "last_message": last_message,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["events"]) -> MetaOapg.properties.events: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["followers"]) -> MetaOapg.properties.followers: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["messages"]) -> MetaOapg.properties.messages: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["inboxes"]) -> MetaOapg.properties.inboxes: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["last_message"]) -> MetaOapg.properties.last_message: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["events", "followers", "messages", "comments", "inboxes", "last_message", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["events"]) -> typing.Union[MetaOapg.properties.events, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["followers"]) -> typing.Union[MetaOapg.properties.followers, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["messages"]) -> typing.Union[MetaOapg.properties.messages, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["inboxes"]) -> typing.Union[MetaOapg.properties.inboxes, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["last_message"]) -> typing.Union[MetaOapg.properties.last_message, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["events", "followers", "messages", "comments", "inboxes", "last_message", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                events: typing.Union[MetaOapg.properties.events, str, schemas.Unset] = schemas.unset,
                                followers: typing.Union[MetaOapg.properties.followers, str, schemas.Unset] = schemas.unset,
                                messages: typing.Union[MetaOapg.properties.messages, str, schemas.Unset] = schemas.unset,
                                comments: typing.Union[MetaOapg.properties.comments, str, schemas.Unset] = schemas.unset,
                                inboxes: typing.Union[MetaOapg.properties.inboxes, str, schemas.Unset] = schemas.unset,
                                last_message: typing.Union[MetaOapg.properties.last_message, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'related':
                                return super().__new__(
                                    cls,
                                    *args,
                                    events=events,
                                    followers=followers,
                                    messages=messages,
                                    comments=comments,
                                    inboxes=inboxes,
                                    last_message=last_message,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "self": _self,
                            "related": related,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["self"]) -> MetaOapg.properties._self: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["related"]) -> MetaOapg.properties.related: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["self", "related", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["self"]) -> typing.Union[MetaOapg.properties._self, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["related"]) -> typing.Union[MetaOapg.properties.related, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["self", "related", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    related: typing.Union[MetaOapg.properties.related, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> '_links':
                    return super().__new__(
                        cls,
                        *args,
                        related=related,
                        _configuration=_configuration,
                        **kwargs,
                    )
            id = schemas.StrSchema
            subject = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "archived": "ARCHIVED",
                        "unassigned": "UNASSIGNED",
                        "deleted": "DELETED",
                        "assigned": "ASSIGNED",
                    }
                
                @schemas.classproperty
                def ARCHIVED(cls):
                    return cls("archived")
                
                @schemas.classproperty
                def UNASSIGNED(cls):
                    return cls("unassigned")
                
                @schemas.classproperty
                def DELETED(cls):
                    return cls("deleted")
                
                @schemas.classproperty
                def ASSIGNED(cls):
                    return cls("assigned")
        
            @staticmethod
            def assignee() -> typing.Type['TeammateResponse']:
                return TeammateResponse
        
            @staticmethod
            def recipient() -> typing.Type['RecipientResponse']:
                return RecipientResponse
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LinkResponse']:
                        return LinkResponse
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['LinkResponse'], typing.List['LinkResponse']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LinkResponse':
                    return super().__getitem__(i)
            custom_fields = schemas.DictSchema
            created_at = schemas.NumberSchema
            waiting_since = schemas.NumberSchema
            is_private = schemas.BoolSchema
            
            
            class scheduled_reminders(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Reminder']:
                        return Reminder
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Reminder'], typing.List['Reminder']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scheduled_reminders':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Reminder':
                    return super().__getitem__(i)
            
            
            class metadata(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class external_conversation_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'external_conversation_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "external_conversation_ids": external_conversation_ids,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["external_conversation_ids"]) -> MetaOapg.properties.external_conversation_ids: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["external_conversation_ids", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["external_conversation_ids"]) -> typing.Union[MetaOapg.properties.external_conversation_ids, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["external_conversation_ids", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    external_conversation_ids: typing.Union[MetaOapg.properties.external_conversation_ids, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'metadata':
                    return super().__new__(
                        cls,
                        *args,
                        external_conversation_ids=external_conversation_ids,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "tags": tags,
                "_links": _links,
                "id": id,
                "subject": subject,
                "status": status,
                "assignee": assignee,
                "recipient": recipient,
                "links": links,
                "custom_fields": custom_fields,
                "created_at": created_at,
                "waiting_since": waiting_since,
                "is_private": is_private,
                "scheduled_reminders": scheduled_reminders,
                "metadata": metadata,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_links"]) -> MetaOapg.properties._links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignee"]) -> 'TeammateResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipient"]) -> 'RecipientResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_fields"]) -> MetaOapg.properties.custom_fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["waiting_since"]) -> MetaOapg.properties.waiting_since: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_private"]) -> MetaOapg.properties.is_private: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduled_reminders"]) -> MetaOapg.properties.scheduled_reminders: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "_links", "id", "subject", "status", "assignee", "recipient", "links", "custom_fields", "created_at", "waiting_since", "is_private", "scheduled_reminders", "metadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_links"]) -> typing.Union[MetaOapg.properties._links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union[MetaOapg.properties.subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignee"]) -> typing.Union['TeammateResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipient"]) -> typing.Union['RecipientResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_fields"]) -> typing.Union[MetaOapg.properties.custom_fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["waiting_since"]) -> typing.Union[MetaOapg.properties.waiting_since, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_private"]) -> typing.Union[MetaOapg.properties.is_private, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduled_reminders"]) -> typing.Union[MetaOapg.properties.scheduled_reminders, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "_links", "id", "subject", "status", "assignee", "recipient", "links", "custom_fields", "created_at", "waiting_since", "is_private", "scheduled_reminders", "metadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, schemas.Unset] = schemas.unset,
        _links: typing.Union[MetaOapg.properties._links, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        subject: typing.Union[MetaOapg.properties.subject, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        assignee: typing.Union['TeammateResponse', schemas.Unset] = schemas.unset,
        recipient: typing.Union['RecipientResponse', schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        custom_fields: typing.Union[MetaOapg.properties.custom_fields, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        waiting_since: typing.Union[MetaOapg.properties.waiting_since, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        is_private: typing.Union[MetaOapg.properties.is_private, bool, schemas.Unset] = schemas.unset,
        scheduled_reminders: typing.Union[MetaOapg.properties.scheduled_reminders, list, tuple, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConversationResponse':
        return super().__new__(
            cls,
            *args,
            tags=tags,
            _links=_links,
            id=id,
            subject=subject,
            status=status,
            assignee=assignee,
            recipient=recipient,
            links=links,
            custom_fields=custom_fields,
            created_at=created_at,
            waiting_since=waiting_since,
            is_private=is_private,
            scheduled_reminders=scheduled_reminders,
            metadata=metadata,
            _configuration=_configuration,
            **kwargs,
        )

from front_core_python_sdk.model.link_response import LinkResponse
from front_core_python_sdk.model.recipient_response import RecipientResponse
from front_core_python_sdk.model.reminder import Reminder
from front_core_python_sdk.model.tag_response import TagResponse
from front_core_python_sdk.model.teammate_response import TeammateResponse
