# coding: utf-8

"""
    Core API

    Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

    The version of the OpenAPI document: 1.0.0
    Created by: https://community.front.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from front_core_python_sdk import schemas  # noqa: F401


class ChannelResponse(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class _links(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        _self = schemas.StrSchema
                        
                        
                        class related(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    inbox = schemas.StrSchema
                                    owner = schemas.StrSchema
                                    __annotations__ = {
                                        "inbox": inbox,
                                        "owner": owner,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["inbox"]) -> MetaOapg.properties.inbox: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["inbox", "owner", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["inbox"]) -> typing.Union[MetaOapg.properties.inbox, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["inbox", "owner", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                inbox: typing.Union[MetaOapg.properties.inbox, str, schemas.Unset] = schemas.unset,
                                owner: typing.Union[MetaOapg.properties.owner, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'related':
                                return super().__new__(
                                    cls,
                                    *args,
                                    inbox=inbox,
                                    owner=owner,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "self": _self,
                            "related": related,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["self"]) -> MetaOapg.properties._self: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["related"]) -> MetaOapg.properties.related: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["self", "related", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["self"]) -> typing.Union[MetaOapg.properties._self, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["related"]) -> typing.Union[MetaOapg.properties.related, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["self", "related", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    related: typing.Union[MetaOapg.properties.related, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> '_links':
                    return super().__new__(
                        cls,
                        *args,
                        related=related,
                        _configuration=_configuration,
                        **kwargs,
                    )
            id = schemas.StrSchema
            name = schemas.StrSchema
            address = schemas.StrSchema
            
            
            class types(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CUSTOM(cls):
                    return cls("custom")
                
                @schemas.classproperty
                def FACEBOOK(cls):
                    return cls("facebook")
                
                @schemas.classproperty
                def GMAIL(cls):
                    return cls("gmail")
                
                @schemas.classproperty
                def GOOGLE_PLAY(cls):
                    return cls("google_play")
                
                @schemas.classproperty
                def IMAP(cls):
                    return cls("imap")
                
                @schemas.classproperty
                def INTERCOM(cls):
                    return cls("intercom")
                
                @schemas.classproperty
                def FORM(cls):
                    return cls("form")
                
                @schemas.classproperty
                def OFFICE365(cls):
                    return cls("office365")
                
                @schemas.classproperty
                def LAYER_ANON(cls):
                    return cls("layer_anon")
                
                @schemas.classproperty
                def SMOOCH(cls):
                    return cls("smooch")
                
                @schemas.classproperty
                def SMTP(cls):
                    return cls("smtp")
                
                @schemas.classproperty
                def TALKDESK(cls):
                    return cls("talkdesk")
                
                @schemas.classproperty
                def TRULY(cls):
                    return cls("truly")
                
                @schemas.classproperty
                def TWILIO(cls):
                    return cls("twilio")
                
                @schemas.classproperty
                def TWILIO_WHATSAPP(cls):
                    return cls("twilio_whatsapp")
                
                @schemas.classproperty
                def TWITTER(cls):
                    return cls("twitter")
                
                @schemas.classproperty
                def TWITTER_DM(cls):
                    return cls("twitter_dm")
                
                @schemas.classproperty
                def YALO_WHA(cls):
                    return cls("yalo_wha")
                
                @schemas.classproperty
                def FRONT_CHAT(cls):
                    return cls("front_chat")
                
                @schemas.classproperty
                def FRONT_MAIL(cls):
                    return cls("front_mail")
            send_as = schemas.StrSchema
            
            
            class settings(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class undo_send_time(
                            schemas.EnumBase,
                            schemas.IntSchema
                        ):
                            
                            @schemas.classproperty
                            def POSITIVE_0(cls):
                                return cls(0)
                            
                            @schemas.classproperty
                            def POSITIVE_5(cls):
                                return cls(5)
                            
                            @schemas.classproperty
                            def POSITIVE_10(cls):
                                return cls(10)
                            
                            @schemas.classproperty
                            def POSITIVE_15(cls):
                                return cls(15)
                            
                            @schemas.classproperty
                            def POSITIVE_30(cls):
                                return cls(30)
                            
                            @schemas.classproperty
                            def POSITIVE_60(cls):
                                return cls(60)
                        all_teammates_can_reply = schemas.BoolSchema
                        __annotations__ = {
                            "undo_send_time": undo_send_time,
                            "all_teammates_can_reply": all_teammates_can_reply,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["undo_send_time"]) -> MetaOapg.properties.undo_send_time: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["all_teammates_can_reply"]) -> MetaOapg.properties.all_teammates_can_reply: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["undo_send_time", "all_teammates_can_reply", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["undo_send_time"]) -> typing.Union[MetaOapg.properties.undo_send_time, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["all_teammates_can_reply"]) -> typing.Union[MetaOapg.properties.all_teammates_can_reply, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["undo_send_time", "all_teammates_can_reply", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    undo_send_time: typing.Union[MetaOapg.properties.undo_send_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    all_teammates_can_reply: typing.Union[MetaOapg.properties.all_teammates_can_reply, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'settings':
                    return super().__new__(
                        cls,
                        *args,
                        undo_send_time=undo_send_time,
                        all_teammates_can_reply=all_teammates_can_reply,
                        _configuration=_configuration,
                        **kwargs,
                    )
            is_private = schemas.BoolSchema
            is_valid = schemas.BoolSchema
            __annotations__ = {
                "_links": _links,
                "id": id,
                "name": name,
                "address": address,
                "types": types,
                "send_as": send_as,
                "settings": settings,
                "is_private": is_private,
                "is_valid": is_valid,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_links"]) -> MetaOapg.properties._links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["types"]) -> MetaOapg.properties.types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["send_as"]) -> MetaOapg.properties.send_as: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> MetaOapg.properties.settings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_private"]) -> MetaOapg.properties.is_private: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_valid"]) -> MetaOapg.properties.is_valid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["_links", "id", "name", "address", "types", "send_as", "settings", "is_private", "is_valid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_links"]) -> typing.Union[MetaOapg.properties._links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["types"]) -> typing.Union[MetaOapg.properties.types, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["send_as"]) -> typing.Union[MetaOapg.properties.send_as, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settings"]) -> typing.Union[MetaOapg.properties.settings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_private"]) -> typing.Union[MetaOapg.properties.is_private, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_valid"]) -> typing.Union[MetaOapg.properties.is_valid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["_links", "id", "name", "address", "types", "send_as", "settings", "is_private", "is_valid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _links: typing.Union[MetaOapg.properties._links, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
        types: typing.Union[MetaOapg.properties.types, str, schemas.Unset] = schemas.unset,
        send_as: typing.Union[MetaOapg.properties.send_as, str, schemas.Unset] = schemas.unset,
        settings: typing.Union[MetaOapg.properties.settings, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        is_private: typing.Union[MetaOapg.properties.is_private, bool, schemas.Unset] = schemas.unset,
        is_valid: typing.Union[MetaOapg.properties.is_valid, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChannelResponse':
        return super().__new__(
            cls,
            *args,
            _links=_links,
            id=id,
            name=name,
            address=address,
            types=types,
            send_as=send_as,
            settings=settings,
            is_private=is_private,
            is_valid=is_valid,
            _configuration=_configuration,
            **kwargs,
        )
