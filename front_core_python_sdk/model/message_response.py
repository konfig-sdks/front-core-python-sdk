# coding: utf-8

"""
    Core API

    Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

    The version of the OpenAPI document: 1.0.0
    Created by: https://community.front.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from front_core_python_sdk import schemas  # noqa: F401


class MessageResponse(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            version = schemas.StrSchema
            
            
            class _links(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        _self = schemas.StrSchema
                        
                        
                        class related(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    conversation = schemas.StrSchema
                                    message_replied_to = schemas.StrSchema
                                    message_seen = schemas.StrSchema
                                    __annotations__ = {
                                        "conversation": conversation,
                                        "message_replied_to": message_replied_to,
                                        "message_seen": message_seen,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["conversation"]) -> MetaOapg.properties.conversation: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["message_replied_to"]) -> MetaOapg.properties.message_replied_to: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["message_seen"]) -> MetaOapg.properties.message_seen: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["conversation", "message_replied_to", "message_seen", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["conversation"]) -> typing.Union[MetaOapg.properties.conversation, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["message_replied_to"]) -> typing.Union[MetaOapg.properties.message_replied_to, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["message_seen"]) -> typing.Union[MetaOapg.properties.message_seen, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["conversation", "message_replied_to", "message_seen", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                conversation: typing.Union[MetaOapg.properties.conversation, str, schemas.Unset] = schemas.unset,
                                message_replied_to: typing.Union[MetaOapg.properties.message_replied_to, str, schemas.Unset] = schemas.unset,
                                message_seen: typing.Union[MetaOapg.properties.message_seen, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'related':
                                return super().__new__(
                                    cls,
                                    *args,
                                    conversation=conversation,
                                    message_replied_to=message_replied_to,
                                    message_seen=message_seen,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "self": _self,
                            "related": related,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["self"]) -> MetaOapg.properties._self: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["related"]) -> MetaOapg.properties.related: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["self", "related", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["self"]) -> typing.Union[MetaOapg.properties._self, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["related"]) -> typing.Union[MetaOapg.properties.related, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["self", "related", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    related: typing.Union[MetaOapg.properties.related, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> '_links':
                    return super().__new__(
                        cls,
                        *args,
                        related=related,
                        _configuration=_configuration,
                        **kwargs,
                    )
            id = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "call": "CALL",
                        "custom": "CUSTOM",
                        "email": "EMAIL",
                        "facebook": "FACEBOOK",
                        "front_chat": "FRONT_CHAT",
                        "googleplay": "GOOGLEPLAY",
                        "intercom": "INTERCOM",
                        "internal": "INTERNAL",
                        "phone-call": "PHONECALL",
                        "sms": "SMS",
                        "smooch": "SMOOCH",
                        "tweet": "TWEET",
                        "tweet_dm": "TWEET_DM",
                        "whatsapp": "WHATSAPP",
                        "yalo_wha": "YALO_WHA",
                    }
                
                @schemas.classproperty
                def CALL(cls):
                    return cls("call")
                
                @schemas.classproperty
                def CUSTOM(cls):
                    return cls("custom")
                
                @schemas.classproperty
                def EMAIL(cls):
                    return cls("email")
                
                @schemas.classproperty
                def FACEBOOK(cls):
                    return cls("facebook")
                
                @schemas.classproperty
                def FRONT_CHAT(cls):
                    return cls("front_chat")
                
                @schemas.classproperty
                def GOOGLEPLAY(cls):
                    return cls("googleplay")
                
                @schemas.classproperty
                def INTERCOM(cls):
                    return cls("intercom")
                
                @schemas.classproperty
                def INTERNAL(cls):
                    return cls("internal")
                
                @schemas.classproperty
                def PHONECALL(cls):
                    return cls("phone-call")
                
                @schemas.classproperty
                def SMS(cls):
                    return cls("sms")
                
                @schemas.classproperty
                def SMOOCH(cls):
                    return cls("smooch")
                
                @schemas.classproperty
                def TWEET(cls):
                    return cls("tweet")
                
                @schemas.classproperty
                def TWEET_DM(cls):
                    return cls("tweet_dm")
                
                @schemas.classproperty
                def WHATSAPP(cls):
                    return cls("whatsapp")
                
                @schemas.classproperty
                def YALO_WHA(cls):
                    return cls("yalo_wha")
            is_inbound = schemas.BoolSchema
            
            
            class draft_mode(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "shared": "SHARED",
                        "private": "PRIVATE",
                    }
                
                @schemas.classproperty
                def SHARED(cls):
                    return cls("shared")
                
                @schemas.classproperty
                def PRIVATE(cls):
                    return cls("private")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'draft_mode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            error_type = schemas.StrSchema
            created_at = schemas.NumberSchema
            subject = schemas.StrSchema
            blurb = schemas.StrSchema
        
            @staticmethod
            def author() -> typing.Type['TeammateResponse']:
                return TeammateResponse
            
            
            class recipients(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RecipientResponse']:
                        return RecipientResponse
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['RecipientResponse'], typing.List['RecipientResponse']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'recipients':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RecipientResponse':
                    return super().__getitem__(i)
            body = schemas.StrSchema
            text = schemas.StrSchema
            
            
            class attachments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Attachment']:
                        return Attachment
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Attachment'], typing.List['Attachment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'attachments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Attachment':
                    return super().__getitem__(i)
        
            @staticmethod
            def signature() -> typing.Type['SignatureResponse']:
                return SignatureResponse
            
            
            class metadata(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        intercom_url = schemas.StrSchema
                        duration = schemas.IntSchema
                        have_been_answered = schemas.BoolSchema
                        external_id = schemas.StrSchema
                        twitter_url = schemas.StrSchema
                        is_retweet = schemas.BoolSchema
                        have_been_retweeted = schemas.BoolSchema
                        have_been_favorited = schemas.BoolSchema
                        thread_ref = schemas.StrSchema
                        headers = schemas.DictSchema
                        chat_visitor_url = schemas.StrSchema
                        __annotations__ = {
                            "intercom_url": intercom_url,
                            "duration": duration,
                            "have_been_answered": have_been_answered,
                            "external_id": external_id,
                            "twitter_url": twitter_url,
                            "is_retweet": is_retweet,
                            "have_been_retweeted": have_been_retweeted,
                            "have_been_favorited": have_been_favorited,
                            "thread_ref": thread_ref,
                            "headers": headers,
                            "chat_visitor_url": chat_visitor_url,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["intercom_url"]) -> MetaOapg.properties.intercom_url: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["have_been_answered"]) -> MetaOapg.properties.have_been_answered: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["external_id"]) -> MetaOapg.properties.external_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["twitter_url"]) -> MetaOapg.properties.twitter_url: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["is_retweet"]) -> MetaOapg.properties.is_retweet: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["have_been_retweeted"]) -> MetaOapg.properties.have_been_retweeted: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["have_been_favorited"]) -> MetaOapg.properties.have_been_favorited: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["thread_ref"]) -> MetaOapg.properties.thread_ref: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["headers"]) -> MetaOapg.properties.headers: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["chat_visitor_url"]) -> MetaOapg.properties.chat_visitor_url: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["intercom_url", "duration", "have_been_answered", "external_id", "twitter_url", "is_retweet", "have_been_retweeted", "have_been_favorited", "thread_ref", "headers", "chat_visitor_url", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["intercom_url"]) -> typing.Union[MetaOapg.properties.intercom_url, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["have_been_answered"]) -> typing.Union[MetaOapg.properties.have_been_answered, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["external_id"]) -> typing.Union[MetaOapg.properties.external_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["twitter_url"]) -> typing.Union[MetaOapg.properties.twitter_url, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["is_retweet"]) -> typing.Union[MetaOapg.properties.is_retweet, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["have_been_retweeted"]) -> typing.Union[MetaOapg.properties.have_been_retweeted, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["have_been_favorited"]) -> typing.Union[MetaOapg.properties.have_been_favorited, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["thread_ref"]) -> typing.Union[MetaOapg.properties.thread_ref, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["headers"]) -> typing.Union[MetaOapg.properties.headers, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["chat_visitor_url"]) -> typing.Union[MetaOapg.properties.chat_visitor_url, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["intercom_url", "duration", "have_been_answered", "external_id", "twitter_url", "is_retweet", "have_been_retweeted", "have_been_favorited", "thread_ref", "headers", "chat_visitor_url", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    intercom_url: typing.Union[MetaOapg.properties.intercom_url, str, schemas.Unset] = schemas.unset,
                    duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    have_been_answered: typing.Union[MetaOapg.properties.have_been_answered, bool, schemas.Unset] = schemas.unset,
                    external_id: typing.Union[MetaOapg.properties.external_id, str, schemas.Unset] = schemas.unset,
                    twitter_url: typing.Union[MetaOapg.properties.twitter_url, str, schemas.Unset] = schemas.unset,
                    is_retweet: typing.Union[MetaOapg.properties.is_retweet, bool, schemas.Unset] = schemas.unset,
                    have_been_retweeted: typing.Union[MetaOapg.properties.have_been_retweeted, bool, schemas.Unset] = schemas.unset,
                    have_been_favorited: typing.Union[MetaOapg.properties.have_been_favorited, bool, schemas.Unset] = schemas.unset,
                    thread_ref: typing.Union[MetaOapg.properties.thread_ref, str, schemas.Unset] = schemas.unset,
                    headers: typing.Union[MetaOapg.properties.headers, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    chat_visitor_url: typing.Union[MetaOapg.properties.chat_visitor_url, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'metadata':
                    return super().__new__(
                        cls,
                        *args,
                        intercom_url=intercom_url,
                        duration=duration,
                        have_been_answered=have_been_answered,
                        external_id=external_id,
                        twitter_url=twitter_url,
                        is_retweet=is_retweet,
                        have_been_retweeted=have_been_retweeted,
                        have_been_favorited=have_been_favorited,
                        thread_ref=thread_ref,
                        headers=headers,
                        chat_visitor_url=chat_visitor_url,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "version": version,
                "_links": _links,
                "id": id,
                "type": type,
                "is_inbound": is_inbound,
                "draft_mode": draft_mode,
                "error_type": error_type,
                "created_at": created_at,
                "subject": subject,
                "blurb": blurb,
                "author": author,
                "recipients": recipients,
                "body": body,
                "text": text,
                "attachments": attachments,
                "signature": signature,
                "metadata": metadata,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_links"]) -> MetaOapg.properties._links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_inbound"]) -> MetaOapg.properties.is_inbound: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["draft_mode"]) -> MetaOapg.properties.draft_mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_type"]) -> MetaOapg.properties.error_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blurb"]) -> MetaOapg.properties.blurb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["author"]) -> 'TeammateResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipients"]) -> MetaOapg.properties.recipients: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachments"]) -> MetaOapg.properties.attachments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signature"]) -> 'SignatureResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "_links", "id", "type", "is_inbound", "draft_mode", "error_type", "created_at", "subject", "blurb", "author", "recipients", "body", "text", "attachments", "signature", "metadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_links"]) -> typing.Union[MetaOapg.properties._links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_inbound"]) -> typing.Union[MetaOapg.properties.is_inbound, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["draft_mode"]) -> typing.Union[MetaOapg.properties.draft_mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_type"]) -> typing.Union[MetaOapg.properties.error_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union[MetaOapg.properties.subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blurb"]) -> typing.Union[MetaOapg.properties.blurb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["author"]) -> typing.Union['TeammateResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipients"]) -> typing.Union[MetaOapg.properties.recipients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> typing.Union[MetaOapg.properties.body, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachments"]) -> typing.Union[MetaOapg.properties.attachments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signature"]) -> typing.Union['SignatureResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "_links", "id", "type", "is_inbound", "draft_mode", "error_type", "created_at", "subject", "blurb", "author", "recipients", "body", "text", "attachments", "signature", "metadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        _links: typing.Union[MetaOapg.properties._links, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        is_inbound: typing.Union[MetaOapg.properties.is_inbound, bool, schemas.Unset] = schemas.unset,
        draft_mode: typing.Union[MetaOapg.properties.draft_mode, None, str, schemas.Unset] = schemas.unset,
        error_type: typing.Union[MetaOapg.properties.error_type, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        subject: typing.Union[MetaOapg.properties.subject, str, schemas.Unset] = schemas.unset,
        blurb: typing.Union[MetaOapg.properties.blurb, str, schemas.Unset] = schemas.unset,
        author: typing.Union['TeammateResponse', schemas.Unset] = schemas.unset,
        recipients: typing.Union[MetaOapg.properties.recipients, list, tuple, schemas.Unset] = schemas.unset,
        body: typing.Union[MetaOapg.properties.body, str, schemas.Unset] = schemas.unset,
        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
        attachments: typing.Union[MetaOapg.properties.attachments, list, tuple, schemas.Unset] = schemas.unset,
        signature: typing.Union['SignatureResponse', schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MessageResponse':
        return super().__new__(
            cls,
            *args,
            version=version,
            _links=_links,
            id=id,
            type=type,
            is_inbound=is_inbound,
            draft_mode=draft_mode,
            error_type=error_type,
            created_at=created_at,
            subject=subject,
            blurb=blurb,
            author=author,
            recipients=recipients,
            body=body,
            text=text,
            attachments=attachments,
            signature=signature,
            metadata=metadata,
            _configuration=_configuration,
            **kwargs,
        )

from front_core_python_sdk.model.attachment import Attachment
from front_core_python_sdk.model.recipient_response import RecipientResponse
from front_core_python_sdk.model.signature_response import SignatureResponse
from front_core_python_sdk.model.teammate_response import TeammateResponse
