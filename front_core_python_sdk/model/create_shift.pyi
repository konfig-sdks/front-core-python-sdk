# coding: utf-8

"""
    Core API

    Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.

    The version of the OpenAPI document: 1.0.0
    Created by: https://community.front.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from front_core_python_sdk import schemas  # noqa: F401


class CreateShift(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "teammate_ids",
            "times",
            "color",
            "timezone",
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            
            
            class color(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def BLACK(cls):
                    return cls("black")
                
                @schemas.classproperty
                def GREY(cls):
                    return cls("grey")
                
                @schemas.classproperty
                def PINK(cls):
                    return cls("pink")
                
                @schemas.classproperty
                def PURPLE(cls):
                    return cls("purple")
                
                @schemas.classproperty
                def BLUE(cls):
                    return cls("blue")
                
                @schemas.classproperty
                def TEAL(cls):
                    return cls("teal")
                
                @schemas.classproperty
                def GREEN(cls):
                    return cls("green")
                
                @schemas.classproperty
                def YELLOW(cls):
                    return cls("yellow")
                
                @schemas.classproperty
                def ORANGE(cls):
                    return cls("orange")
                
                @schemas.classproperty
                def RED(cls):
                    return cls("red")
            timezone = schemas.StrSchema
        
            @staticmethod
            def times() -> typing.Type['ShiftIntervals']:
                return ShiftIntervals
            
            
            class teammate_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'teammate_ids':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "name": name,
                "color": color,
                "timezone": timezone,
                "times": times,
                "teammate_ids": teammate_ids,
            }

    
    teammate_ids: MetaOapg.properties.teammate_ids
    times: 'ShiftIntervals'
    color: MetaOapg.properties.color
    timezone: MetaOapg.properties.timezone
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["times"]) -> 'ShiftIntervals': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teammate_ids"]) -> MetaOapg.properties.teammate_ids: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "color", "timezone", "times", "teammate_ids", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["times"]) -> 'ShiftIntervals': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teammate_ids"]) -> MetaOapg.properties.teammate_ids: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "color", "timezone", "times", "teammate_ids", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        teammate_ids: typing.Union[MetaOapg.properties.teammate_ids, list, tuple, ],
        times: 'ShiftIntervals',
        color: typing.Union[MetaOapg.properties.color, str, ],
        timezone: typing.Union[MetaOapg.properties.timezone, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateShift':
        return super().__new__(
            cls,
            *args,
            teammate_ids=teammate_ids,
            times=times,
            color=color,
            timezone=timezone,
            name=name,
            _configuration=_configuration,
            **kwargs,
        )

from front_core_python_sdk.model.shift_intervals import ShiftIntervals
